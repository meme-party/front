/* tslint:disable */
/* eslint-disable */
/**
 * Dionysus API
 * Meme Project
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev.shinkeonkim@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime"
import type { Video } from "./Video"
import { VideoFromJSON, VideoFromJSONTyped, VideoToJSON, VideoToJSONTyped } from "./Video"
import type { TypeEnum } from "./TypeEnum"
import { TypeEnumFromJSON, TypeEnumFromJSONTyped, TypeEnumToJSON, TypeEnumToJSONTyped } from "./TypeEnum"
import type { Tag } from "./Tag"
import { TagFromJSON, TagFromJSONTyped, TagToJSON, TagToJSONTyped } from "./Tag"
import type { Audio } from "./Audio"
import { AudioFromJSON, AudioFromJSONTyped, AudioToJSON, AudioToJSONTyped } from "./Audio"
import type { Thumbnail } from "./Thumbnail"
import { ThumbnailFromJSON, ThumbnailFromJSONTyped, ThumbnailToJSON, ThumbnailToJSONTyped } from "./Thumbnail"

/**
 *
 * @export
 * @interface Meme
 */
export interface Meme {
  /**
   *
   * @type {number}
   * @memberof Meme
   */
  readonly id: number
  /**
   *
   * @type {string}
   * @memberof Meme
   */
  title: string
  /**
   *
   * @type {TypeEnum}
   * @memberof Meme
   */
  type: TypeEnum
  /**
   *
   * @type {string}
   * @memberof Meme
   */
  description: string
  /**
   *
   * @type {number}
   * @memberof Meme
   */
  thumbnailId?: number | null
  /**
   *
   * @type {Thumbnail}
   * @memberof Meme
   */
  readonly thumbnail: Thumbnail
  /**
   *
   * @type {number}
   * @memberof Meme
   */
  audioId?: number | null
  /**
   *
   * @type {Audio}
   * @memberof Meme
   */
  readonly audio: Audio
  /**
   *
   * @type {number}
   * @memberof Meme
   */
  videoId?: number | null
  /**
   *
   * @type {Video}
   * @memberof Meme
   */
  readonly video: Video
  /**
   *
   * @type {string}
   * @memberof Meme
   */
  originalTitle?: string | null
  /**
   *
   * @type {string}
   * @memberof Meme
   */
  originalLink?: string | null
  /**
   *
   * @type {Array<number>}
   * @memberof Meme
   */
  tagIds?: Array<number>
  /**
   *
   * @type {Array<Tag>}
   * @memberof Meme
   */
  readonly tags: Array<Tag>
  /**
   *
   * @type {string}
   * @memberof Meme
   */
  readonly isBookmarked: string
  /**
   *
   * @type {Date}
   * @memberof Meme
   */
  readonly createdAt: Date
  /**
   *
   * @type {Date}
   * @memberof Meme
   */
  readonly updatedAt: Date
}

/**
 * Check if a given object implements the Meme interface.
 */
export function instanceOfMeme(value: object): value is Meme {
  if (!("id" in value) || value["id"] === undefined) return false
  if (!("title" in value) || value["title"] === undefined) return false
  if (!("type" in value) || value["type"] === undefined) return false
  if (!("description" in value) || value["description"] === undefined) return false
  if (!("thumbnail" in value) || value["thumbnail"] === undefined) return false
  if (!("audio" in value) || value["audio"] === undefined) return false
  if (!("video" in value) || value["video"] === undefined) return false
  if (!("tags" in value) || value["tags"] === undefined) return false
  if (!("isBookmarked" in value) || value["isBookmarked"] === undefined) return false
  if (!("createdAt" in value) || value["createdAt"] === undefined) return false
  if (!("updatedAt" in value) || value["updatedAt"] === undefined) return false
  return true
}

export function MemeFromJSON(json: any): Meme {
  return MemeFromJSONTyped(json, false)
}

export function MemeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Meme {
  if (json == null) {
    return json
  }
  return {
    id: json["id"],
    title: json["title"],
    type: TypeEnumFromJSON(json["type"]),
    description: json["description"],
    thumbnailId: json["thumbnail_id"] == null ? undefined : json["thumbnail_id"],
    thumbnail: ThumbnailFromJSON(json["thumbnail"]),
    audioId: json["audio_id"] == null ? undefined : json["audio_id"],
    audio: AudioFromJSON(json["audio"]),
    videoId: json["video_id"] == null ? undefined : json["video_id"],
    video: VideoFromJSON(json["video"]),
    originalTitle: json["original_title"] == null ? undefined : json["original_title"],
    originalLink: json["original_link"] == null ? undefined : json["original_link"],
    tagIds: json["tag_ids"] == null ? undefined : json["tag_ids"],
    tags: (json["tags"] as Array<any>).map(TagFromJSON),
    isBookmarked: json["is_bookmarked"],
    createdAt: new Date(json["created_at"]),
    updatedAt: new Date(json["updated_at"])
  }
}

export function MemeToJSON(json: any): Meme {
  return MemeToJSONTyped(json, false)
}

export function MemeToJSONTyped(
  value?: Omit<
    Meme,
    "id" | "thumbnail" | "audio" | "video" | "tags" | "is_bookmarked" | "created_at" | "updated_at"
  > | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value
  }

  return {
    title: value["title"],
    type: TypeEnumToJSON(value["type"]),
    description: value["description"],
    thumbnail_id: value["thumbnailId"],
    audio_id: value["audioId"],
    video_id: value["videoId"],
    original_title: value["originalTitle"],
    original_link: value["originalLink"],
    tag_ids: value["tagIds"]
  }
}

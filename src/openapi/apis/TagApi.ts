/* tslint:disable */
/* eslint-disable */
/**
 * Dionysus API
 * Meme Project
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev.shinkeonkim@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime"
import type { PaginatedTagList, Tag } from "../models/index"
import { PaginatedTagListFromJSON, PaginatedTagListToJSON, TagFromJSON, TagToJSON } from "../models/index"

export interface ApiV1TagsByFirstLetterListRequest {
  count?: number
  orderBy?: ApiV1TagsByFirstLetterListOrderByEnum
}

export interface ApiV1TagsFavoriteListRequest {
  ordering?: string
  page?: number
  perPage?: number
  search?: string
}

export interface ApiV1TagsListRequest {
  category?: number
  firstLetter?: string
  ordering?: string
  page?: number
  perPage?: number
  search?: string
}

/**
 *
 */
export class TagApi extends runtime.BaseAPI {
  /**
   * Retrieve tags grouped by their first letter, with a specified limit per letter.
   */
  async apiV1TagsByFirstLetterListRaw(
    requestParameters: ApiV1TagsByFirstLetterListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Tag>>> {
    const queryParameters: any = {}

    if (requestParameters["count"] != null) {
      queryParameters["count"] = requestParameters["count"]
    }

    if (requestParameters["orderBy"] != null) {
      queryParameters["order_by"] = requestParameters["orderBy"]
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("jwtHeaderAuth", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/tags/by-first-letter/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagFromJSON))
  }

  /**
   * Retrieve tags grouped by their first letter, with a specified limit per letter.
   */
  async apiV1TagsByFirstLetterList(
    requestParameters: ApiV1TagsByFirstLetterListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Tag>> {
    const response = await this.apiV1TagsByFirstLetterListRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async apiV1TagsFavoriteListRaw(
    requestParameters: ApiV1TagsFavoriteListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PaginatedTagList>> {
    const queryParameters: any = {}

    if (requestParameters["ordering"] != null) {
      queryParameters["ordering"] = requestParameters["ordering"]
    }

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"]
    }

    if (requestParameters["perPage"] != null) {
      queryParameters["per_page"] = requestParameters["perPage"]
    }

    if (requestParameters["search"] != null) {
      queryParameters["search"] = requestParameters["search"]
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("jwtHeaderAuth", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/tags/favorite/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedTagListFromJSON(jsonValue))
  }

  /**
   */
  async apiV1TagsFavoriteList(
    requestParameters: ApiV1TagsFavoriteListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PaginatedTagList> {
    const response = await this.apiV1TagsFavoriteListRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Retrieve a list of distinct first letters from available tags.
   */
  async apiV1TagsFirstLettersRetrieveRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<string>>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("jwtHeaderAuth", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/tags/first-letters/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * Retrieve a list of distinct first letters from available tags.
   */
  async apiV1TagsFirstLettersRetrieve(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<string>> {
    const response = await this.apiV1TagsFirstLettersRetrieveRaw(initOverrides)
    return await response.value()
  }

  /**
   */
  async apiV1TagsListRaw(
    requestParameters: ApiV1TagsListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PaginatedTagList>> {
    const queryParameters: any = {}

    if (requestParameters["category"] != null) {
      queryParameters["category"] = requestParameters["category"]
    }

    if (requestParameters["firstLetter"] != null) {
      queryParameters["first_letter"] = requestParameters["firstLetter"]
    }

    if (requestParameters["ordering"] != null) {
      queryParameters["ordering"] = requestParameters["ordering"]
    }

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"]
    }

    if (requestParameters["perPage"] != null) {
      queryParameters["per_page"] = requestParameters["perPage"]
    }

    if (requestParameters["search"] != null) {
      queryParameters["search"] = requestParameters["search"]
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("jwtHeaderAuth", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/tags/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedTagListFromJSON(jsonValue))
  }

  /**
   */
  async apiV1TagsList(
    requestParameters: ApiV1TagsListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PaginatedTagList> {
    const response = await this.apiV1TagsListRaw(requestParameters, initOverrides)
    return await response.value()
  }
}

/**
 * @export
 */
export const ApiV1TagsByFirstLetterListOrderByEnum = {
  CreatedAt: "created_at",
  Name: "name",
  UpdatedAt: "updated_at"
} as const
export type ApiV1TagsByFirstLetterListOrderByEnum =
  (typeof ApiV1TagsByFirstLetterListOrderByEnum)[keyof typeof ApiV1TagsByFirstLetterListOrderByEnum]

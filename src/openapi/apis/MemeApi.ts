/* tslint:disable */
/* eslint-disable */
/**
 * Dionysus API
 * Meme Project
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev.shinkeonkim@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime"
import type { ApiV1MemesBookmarkIdsRetrieve200Response, Meme, PaginatedMemeList } from "../models/index"
import {
  ApiV1MemesBookmarkIdsRetrieve200ResponseFromJSON,
  ApiV1MemesBookmarkIdsRetrieve200ResponseToJSON,
  MemeFromJSON,
  MemeToJSON,
  PaginatedMemeListFromJSON,
  PaginatedMemeListToJSON
} from "../models/index"

export interface ApiV1MemesBookmarkIdsRetrieveRequest {
  memeId: number
}

export interface ApiV1MemesListRequest {
  ordering?: string
  page?: number
  perPage?: number
  search?: string
  tagsCategoryName?: string
  type?: ApiV1MemesListTypeEnum
}

export interface ApiV1MemesRelatedListRequest {
  memeId: number
  count?: number
}

export interface ApiV1MemesRetrieveRequest {
  id: number
}

/**
 *
 */
export class MemeApi extends runtime.BaseAPI {
  /**
   * Retrieve a list of bookmark IDs for a specific meme.
   */
  async apiV1MemesBookmarkIdsRetrieveRaw(
    requestParameters: ApiV1MemesBookmarkIdsRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ApiV1MemesBookmarkIdsRetrieve200Response>> {
    if (requestParameters["memeId"] == null) {
      throw new runtime.RequiredError(
        "memeId",
        'Required parameter "memeId" was null or undefined when calling apiV1MemesBookmarkIdsRetrieve().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("jwtHeaderAuth", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/memes/{meme_id}/bookmark_ids`.replace(
          `{${"meme_id"}}`,
          encodeURIComponent(String(requestParameters["memeId"]))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ApiV1MemesBookmarkIdsRetrieve200ResponseFromJSON(jsonValue)
    )
  }

  /**
   * Retrieve a list of bookmark IDs for a specific meme.
   */
  async apiV1MemesBookmarkIdsRetrieve(
    requestParameters: ApiV1MemesBookmarkIdsRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ApiV1MemesBookmarkIdsRetrieve200Response> {
    const response = await this.apiV1MemesBookmarkIdsRetrieveRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async apiV1MemesListRaw(
    requestParameters: ApiV1MemesListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PaginatedMemeList>> {
    const queryParameters: any = {}

    if (requestParameters["ordering"] != null) {
      queryParameters["ordering"] = requestParameters["ordering"]
    }

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"]
    }

    if (requestParameters["perPage"] != null) {
      queryParameters["per_page"] = requestParameters["perPage"]
    }

    if (requestParameters["search"] != null) {
      queryParameters["search"] = requestParameters["search"]
    }

    if (requestParameters["tagsCategoryName"] != null) {
      queryParameters["tags__category__name"] = requestParameters["tagsCategoryName"]
    }

    if (requestParameters["type"] != null) {
      queryParameters["type"] = requestParameters["type"]
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("jwtHeaderAuth", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/memes/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedMemeListFromJSON(jsonValue))
  }

  /**
   */
  async apiV1MemesList(
    requestParameters: ApiV1MemesListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PaginatedMemeList> {
    const response = await this.apiV1MemesListRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Retrieve a list of memes related to the given meme ID.
   */
  async apiV1MemesRelatedListRaw(
    requestParameters: ApiV1MemesRelatedListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Meme>>> {
    if (requestParameters["memeId"] == null) {
      throw new runtime.RequiredError(
        "memeId",
        'Required parameter "memeId" was null or undefined when calling apiV1MemesRelatedList().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters["count"] != null) {
      queryParameters["count"] = requestParameters["count"]
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("jwtHeaderAuth", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/memes/{meme_id}/related`.replace(
          `{${"meme_id"}}`,
          encodeURIComponent(String(requestParameters["memeId"]))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MemeFromJSON))
  }

  /**
   * Retrieve a list of memes related to the given meme ID.
   */
  async apiV1MemesRelatedList(
    requestParameters: ApiV1MemesRelatedListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Meme>> {
    const response = await this.apiV1MemesRelatedListRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async apiV1MemesRetrieveRaw(
    requestParameters: ApiV1MemesRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Meme>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling apiV1MemesRetrieve().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("jwtHeaderAuth", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/memes/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"]))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) => MemeFromJSON(jsonValue))
  }

  /**
   */
  async apiV1MemesRetrieve(
    requestParameters: ApiV1MemesRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Meme> {
    const response = await this.apiV1MemesRetrieveRaw(requestParameters, initOverrides)
    return await response.value()
  }
}

/**
 * @export
 */
export const ApiV1MemesListTypeEnum = {
  Audio: "Audio",
  Image: "Image",
  Text: "Text",
  Video: "Video"
} as const
export type ApiV1MemesListTypeEnum = (typeof ApiV1MemesListTypeEnum)[keyof typeof ApiV1MemesListTypeEnum]

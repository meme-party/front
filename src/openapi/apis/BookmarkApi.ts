/* tslint:disable */
/* eslint-disable */
/**
 * Dionysus API
 * Meme Project
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev.shinkeonkim@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime"
import type { ApiV1MemesBookmarkIdsRetrieve200Response, Bookmark, PaginatedBookmarkList } from "../models/index"
import {
  ApiV1MemesBookmarkIdsRetrieve200ResponseFromJSON,
  ApiV1MemesBookmarkIdsRetrieve200ResponseToJSON,
  BookmarkFromJSON,
  BookmarkToJSON,
  PaginatedBookmarkListFromJSON,
  PaginatedBookmarkListToJSON
} from "../models/index"

export interface ApiV1BookmarksCreateRequest {
  id: number
  title: string
  bookmarkingsCount: number
  createdAt: Date
  updatedAt: Date
}

export interface ApiV1BookmarksDestroyRequest {
  id: number
}

export interface ApiV1BookmarksListRequest {
  ordering?: string
  page?: number
  perPage?: number
  search?: string
}

export interface ApiV1BookmarksPartialUpdateRequest {
  id: number
  id2?: number
  title?: string
  bookmarkingsCount?: number
  createdAt?: Date
  updatedAt?: Date
}

export interface ApiV1BookmarksRetrieveRequest {
  id: number
}

export interface ApiV1BookmarksUpdateRequest {
  id: number
  id2: number
  title: string
  bookmarkingsCount: number
  createdAt: Date
  updatedAt: Date
}

export interface ApiV1MemesBookmarkIdsRetrieveRequest {
  memeId: number
}

/**
 *
 */
export class BookmarkApi extends runtime.BaseAPI {
  /**
   */
  async apiV1BookmarksCreateRaw(
    requestParameters: ApiV1BookmarksCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Bookmark>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling apiV1BookmarksCreate().'
      )
    }

    if (requestParameters["title"] == null) {
      throw new runtime.RequiredError(
        "title",
        'Required parameter "title" was null or undefined when calling apiV1BookmarksCreate().'
      )
    }

    if (requestParameters["bookmarkingsCount"] == null) {
      throw new runtime.RequiredError(
        "bookmarkingsCount",
        'Required parameter "bookmarkingsCount" was null or undefined when calling apiV1BookmarksCreate().'
      )
    }

    if (requestParameters["createdAt"] == null) {
      throw new runtime.RequiredError(
        "createdAt",
        'Required parameter "createdAt" was null or undefined when calling apiV1BookmarksCreate().'
      )
    }

    if (requestParameters["updatedAt"] == null) {
      throw new runtime.RequiredError(
        "updatedAt",
        'Required parameter "updatedAt" was null or undefined when calling apiV1BookmarksCreate().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("jwtHeaderAuth", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const consumes: runtime.Consume[] = [
      { contentType: "application/x-www-form-urlencoded" },
      { contentType: "multipart/form-data" },
      { contentType: "application/json" }
    ]
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes)

    let formParams: { append(param: string, value: any): any }
    let useForm = false
    if (useForm) {
      formParams = new FormData()
    } else {
      formParams = new URLSearchParams()
    }

    if (requestParameters["id"] != null) {
      formParams.append("id", requestParameters["id"] as any)
    }

    if (requestParameters["title"] != null) {
      formParams.append("title", requestParameters["title"] as any)
    }

    if (requestParameters["bookmarkingsCount"] != null) {
      formParams.append("bookmarkings_count", requestParameters["bookmarkingsCount"] as any)
    }

    if (requestParameters["createdAt"] != null) {
      formParams.append("created_at", (requestParameters["createdAt"] as any).toISOString())
    }

    if (requestParameters["updatedAt"] != null) {
      formParams.append("updated_at", (requestParameters["updatedAt"] as any).toISOString())
    }

    const response = await this.request(
      {
        path: `/api/v1/bookmarks/`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: formParams
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) => BookmarkFromJSON(jsonValue))
  }

  /**
   */
  async apiV1BookmarksCreate(
    requestParameters: ApiV1BookmarksCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Bookmark> {
    const response = await this.apiV1BookmarksCreateRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async apiV1BookmarksDestroyRaw(
    requestParameters: ApiV1BookmarksDestroyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling apiV1BookmarksDestroy().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("jwtHeaderAuth", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/bookmarks/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"]))),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   */
  async apiV1BookmarksDestroy(
    requestParameters: ApiV1BookmarksDestroyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.apiV1BookmarksDestroyRaw(requestParameters, initOverrides)
  }

  /**
   */
  async apiV1BookmarksListRaw(
    requestParameters: ApiV1BookmarksListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PaginatedBookmarkList>> {
    const queryParameters: any = {}

    if (requestParameters["ordering"] != null) {
      queryParameters["ordering"] = requestParameters["ordering"]
    }

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"]
    }

    if (requestParameters["perPage"] != null) {
      queryParameters["per_page"] = requestParameters["perPage"]
    }

    if (requestParameters["search"] != null) {
      queryParameters["search"] = requestParameters["search"]
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("jwtHeaderAuth", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/bookmarks/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedBookmarkListFromJSON(jsonValue))
  }

  /**
   */
  async apiV1BookmarksList(
    requestParameters: ApiV1BookmarksListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PaginatedBookmarkList> {
    const response = await this.apiV1BookmarksListRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async apiV1BookmarksPartialUpdateRaw(
    requestParameters: ApiV1BookmarksPartialUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Bookmark>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling apiV1BookmarksPartialUpdate().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("jwtHeaderAuth", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const consumes: runtime.Consume[] = [
      { contentType: "application/x-www-form-urlencoded" },
      { contentType: "multipart/form-data" },
      { contentType: "application/json" }
    ]
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes)

    let formParams: { append(param: string, value: any): any }
    let useForm = false
    if (useForm) {
      formParams = new FormData()
    } else {
      formParams = new URLSearchParams()
    }

    if (requestParameters["id2"] != null) {
      formParams.append("id", requestParameters["id2"] as any)
    }

    if (requestParameters["title"] != null) {
      formParams.append("title", requestParameters["title"] as any)
    }

    if (requestParameters["bookmarkingsCount"] != null) {
      formParams.append("bookmarkings_count", requestParameters["bookmarkingsCount"] as any)
    }

    if (requestParameters["createdAt"] != null) {
      formParams.append("created_at", (requestParameters["createdAt"] as any).toISOString())
    }

    if (requestParameters["updatedAt"] != null) {
      formParams.append("updated_at", (requestParameters["updatedAt"] as any).toISOString())
    }

    const response = await this.request(
      {
        path: `/api/v1/bookmarks/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"]))),
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: formParams
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) => BookmarkFromJSON(jsonValue))
  }

  /**
   */
  async apiV1BookmarksPartialUpdate(
    requestParameters: ApiV1BookmarksPartialUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Bookmark> {
    const response = await this.apiV1BookmarksPartialUpdateRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async apiV1BookmarksRetrieveRaw(
    requestParameters: ApiV1BookmarksRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Bookmark>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling apiV1BookmarksRetrieve().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("jwtHeaderAuth", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/bookmarks/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"]))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) => BookmarkFromJSON(jsonValue))
  }

  /**
   */
  async apiV1BookmarksRetrieve(
    requestParameters: ApiV1BookmarksRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Bookmark> {
    const response = await this.apiV1BookmarksRetrieveRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async apiV1BookmarksUpdateRaw(
    requestParameters: ApiV1BookmarksUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Bookmark>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling apiV1BookmarksUpdate().'
      )
    }

    if (requestParameters["id2"] == null) {
      throw new runtime.RequiredError(
        "id2",
        'Required parameter "id2" was null or undefined when calling apiV1BookmarksUpdate().'
      )
    }

    if (requestParameters["title"] == null) {
      throw new runtime.RequiredError(
        "title",
        'Required parameter "title" was null or undefined when calling apiV1BookmarksUpdate().'
      )
    }

    if (requestParameters["bookmarkingsCount"] == null) {
      throw new runtime.RequiredError(
        "bookmarkingsCount",
        'Required parameter "bookmarkingsCount" was null or undefined when calling apiV1BookmarksUpdate().'
      )
    }

    if (requestParameters["createdAt"] == null) {
      throw new runtime.RequiredError(
        "createdAt",
        'Required parameter "createdAt" was null or undefined when calling apiV1BookmarksUpdate().'
      )
    }

    if (requestParameters["updatedAt"] == null) {
      throw new runtime.RequiredError(
        "updatedAt",
        'Required parameter "updatedAt" was null or undefined when calling apiV1BookmarksUpdate().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("jwtHeaderAuth", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const consumes: runtime.Consume[] = [
      { contentType: "application/x-www-form-urlencoded" },
      { contentType: "multipart/form-data" },
      { contentType: "application/json" }
    ]
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes)

    let formParams: { append(param: string, value: any): any }
    let useForm = false
    if (useForm) {
      formParams = new FormData()
    } else {
      formParams = new URLSearchParams()
    }

    if (requestParameters["id2"] != null) {
      formParams.append("id", requestParameters["id2"] as any)
    }

    if (requestParameters["title"] != null) {
      formParams.append("title", requestParameters["title"] as any)
    }

    if (requestParameters["bookmarkingsCount"] != null) {
      formParams.append("bookmarkings_count", requestParameters["bookmarkingsCount"] as any)
    }

    if (requestParameters["createdAt"] != null) {
      formParams.append("created_at", (requestParameters["createdAt"] as any).toISOString())
    }

    if (requestParameters["updatedAt"] != null) {
      formParams.append("updated_at", (requestParameters["updatedAt"] as any).toISOString())
    }

    const response = await this.request(
      {
        path: `/api/v1/bookmarks/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"]))),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: formParams
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) => BookmarkFromJSON(jsonValue))
  }

  /**
   */
  async apiV1BookmarksUpdate(
    requestParameters: ApiV1BookmarksUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Bookmark> {
    const response = await this.apiV1BookmarksUpdateRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Retrieve a list of bookmark IDs for a specific meme.
   */
  async apiV1MemesBookmarkIdsRetrieveRaw(
    requestParameters: ApiV1MemesBookmarkIdsRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ApiV1MemesBookmarkIdsRetrieve200Response>> {
    if (requestParameters["memeId"] == null) {
      throw new runtime.RequiredError(
        "memeId",
        'Required parameter "memeId" was null or undefined when calling apiV1MemesBookmarkIdsRetrieve().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("jwtHeaderAuth", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/memes/{meme_id}/bookmark_ids`.replace(
          `{${"meme_id"}}`,
          encodeURIComponent(String(requestParameters["memeId"]))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ApiV1MemesBookmarkIdsRetrieve200ResponseFromJSON(jsonValue)
    )
  }

  /**
   * Retrieve a list of bookmark IDs for a specific meme.
   */
  async apiV1MemesBookmarkIdsRetrieve(
    requestParameters: ApiV1MemesBookmarkIdsRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ApiV1MemesBookmarkIdsRetrieve200Response> {
    const response = await this.apiV1MemesBookmarkIdsRetrieveRaw(requestParameters, initOverrides)
    return await response.value()
  }
}

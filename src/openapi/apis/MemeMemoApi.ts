/* tslint:disable */
/* eslint-disable */
/**
 * Dionysus API
 * Meme Project
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev.shinkeonkim@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime"
import type { Memo, PaginatedMemoList } from "../models/index"
import { MemoFromJSON, MemoToJSON, PaginatedMemoListFromJSON, PaginatedMemoListToJSON } from "../models/index"

export interface ApiV1MemesMemosCreateRequest {
  memePk: string
  id: number
  meme: number
  content: string
  createdAt: Date
  updatedAt: Date
}

export interface ApiV1MemesMemosDestroyRequest {
  id: string
  memePk: string
}

export interface ApiV1MemesMemosListRequest {
  memePk: string
  ordering?: string
  page?: number
  perPage?: number
  search?: string
}

export interface ApiV1MemesMemosPartialUpdateRequest {
  id: string
  memePk: string
  id2?: number
  meme?: number
  content?: string
  createdAt?: Date
  updatedAt?: Date
}

export interface ApiV1MemesMemosRetrieveRequest {
  id: string
  memePk: string
}

export interface ApiV1MemesMemosUpdateRequest {
  id: string
  memePk: string
  id2: number
  meme: number
  content: string
  createdAt: Date
  updatedAt: Date
}

/**
 *
 */
export class MemeMemoApi extends runtime.BaseAPI {
  /**
   */
  async apiV1MemesMemosCreateRaw(
    requestParameters: ApiV1MemesMemosCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Memo>> {
    if (requestParameters["memePk"] == null) {
      throw new runtime.RequiredError(
        "memePk",
        'Required parameter "memePk" was null or undefined when calling apiV1MemesMemosCreate().'
      )
    }

    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling apiV1MemesMemosCreate().'
      )
    }

    if (requestParameters["meme"] == null) {
      throw new runtime.RequiredError(
        "meme",
        'Required parameter "meme" was null or undefined when calling apiV1MemesMemosCreate().'
      )
    }

    if (requestParameters["content"] == null) {
      throw new runtime.RequiredError(
        "content",
        'Required parameter "content" was null or undefined when calling apiV1MemesMemosCreate().'
      )
    }

    if (requestParameters["createdAt"] == null) {
      throw new runtime.RequiredError(
        "createdAt",
        'Required parameter "createdAt" was null or undefined when calling apiV1MemesMemosCreate().'
      )
    }

    if (requestParameters["updatedAt"] == null) {
      throw new runtime.RequiredError(
        "updatedAt",
        'Required parameter "updatedAt" was null or undefined when calling apiV1MemesMemosCreate().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("jwtHeaderAuth", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const consumes: runtime.Consume[] = [
      { contentType: "application/x-www-form-urlencoded" },
      { contentType: "multipart/form-data" },
      { contentType: "application/json" }
    ]
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes)

    let formParams: { append(param: string, value: any): any }
    let useForm = false
    if (useForm) {
      formParams = new FormData()
    } else {
      formParams = new URLSearchParams()
    }

    if (requestParameters["id"] != null) {
      formParams.append("id", requestParameters["id"] as any)
    }

    if (requestParameters["meme"] != null) {
      formParams.append("meme", requestParameters["meme"] as any)
    }

    if (requestParameters["content"] != null) {
      formParams.append("content", requestParameters["content"] as any)
    }

    if (requestParameters["createdAt"] != null) {
      formParams.append("created_at", (requestParameters["createdAt"] as any).toISOString())
    }

    if (requestParameters["updatedAt"] != null) {
      formParams.append("updated_at", (requestParameters["updatedAt"] as any).toISOString())
    }

    const response = await this.request(
      {
        path: `/api/v1/memes/{meme_pk}/memos/`.replace(
          `{${"meme_pk"}}`,
          encodeURIComponent(String(requestParameters["memePk"]))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: formParams
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) => MemoFromJSON(jsonValue))
  }

  /**
   */
  async apiV1MemesMemosCreate(
    requestParameters: ApiV1MemesMemosCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Memo> {
    const response = await this.apiV1MemesMemosCreateRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async apiV1MemesMemosDestroyRaw(
    requestParameters: ApiV1MemesMemosDestroyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling apiV1MemesMemosDestroy().'
      )
    }

    if (requestParameters["memePk"] == null) {
      throw new runtime.RequiredError(
        "memePk",
        'Required parameter "memePk" was null or undefined when calling apiV1MemesMemosDestroy().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("jwtHeaderAuth", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/memes/{meme_pk}/memos/{id}/`
          .replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"])))
          .replace(`{${"meme_pk"}}`, encodeURIComponent(String(requestParameters["memePk"]))),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   */
  async apiV1MemesMemosDestroy(
    requestParameters: ApiV1MemesMemosDestroyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.apiV1MemesMemosDestroyRaw(requestParameters, initOverrides)
  }

  /**
   */
  async apiV1MemesMemosListRaw(
    requestParameters: ApiV1MemesMemosListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PaginatedMemoList>> {
    if (requestParameters["memePk"] == null) {
      throw new runtime.RequiredError(
        "memePk",
        'Required parameter "memePk" was null or undefined when calling apiV1MemesMemosList().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters["ordering"] != null) {
      queryParameters["ordering"] = requestParameters["ordering"]
    }

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"]
    }

    if (requestParameters["perPage"] != null) {
      queryParameters["per_page"] = requestParameters["perPage"]
    }

    if (requestParameters["search"] != null) {
      queryParameters["search"] = requestParameters["search"]
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("jwtHeaderAuth", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/memes/{meme_pk}/memos/`.replace(
          `{${"meme_pk"}}`,
          encodeURIComponent(String(requestParameters["memePk"]))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedMemoListFromJSON(jsonValue))
  }

  /**
   */
  async apiV1MemesMemosList(
    requestParameters: ApiV1MemesMemosListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PaginatedMemoList> {
    const response = await this.apiV1MemesMemosListRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async apiV1MemesMemosPartialUpdateRaw(
    requestParameters: ApiV1MemesMemosPartialUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Memo>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling apiV1MemesMemosPartialUpdate().'
      )
    }

    if (requestParameters["memePk"] == null) {
      throw new runtime.RequiredError(
        "memePk",
        'Required parameter "memePk" was null or undefined when calling apiV1MemesMemosPartialUpdate().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("jwtHeaderAuth", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const consumes: runtime.Consume[] = [
      { contentType: "application/x-www-form-urlencoded" },
      { contentType: "multipart/form-data" },
      { contentType: "application/json" }
    ]
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes)

    let formParams: { append(param: string, value: any): any }
    let useForm = false
    if (useForm) {
      formParams = new FormData()
    } else {
      formParams = new URLSearchParams()
    }

    if (requestParameters["id2"] != null) {
      formParams.append("id", requestParameters["id2"] as any)
    }

    if (requestParameters["meme"] != null) {
      formParams.append("meme", requestParameters["meme"] as any)
    }

    if (requestParameters["content"] != null) {
      formParams.append("content", requestParameters["content"] as any)
    }

    if (requestParameters["createdAt"] != null) {
      formParams.append("created_at", (requestParameters["createdAt"] as any).toISOString())
    }

    if (requestParameters["updatedAt"] != null) {
      formParams.append("updated_at", (requestParameters["updatedAt"] as any).toISOString())
    }

    const response = await this.request(
      {
        path: `/api/v1/memes/{meme_pk}/memos/{id}/`
          .replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"])))
          .replace(`{${"meme_pk"}}`, encodeURIComponent(String(requestParameters["memePk"]))),
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: formParams
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) => MemoFromJSON(jsonValue))
  }

  /**
   */
  async apiV1MemesMemosPartialUpdate(
    requestParameters: ApiV1MemesMemosPartialUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Memo> {
    const response = await this.apiV1MemesMemosPartialUpdateRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async apiV1MemesMemosRetrieveRaw(
    requestParameters: ApiV1MemesMemosRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Memo>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling apiV1MemesMemosRetrieve().'
      )
    }

    if (requestParameters["memePk"] == null) {
      throw new runtime.RequiredError(
        "memePk",
        'Required parameter "memePk" was null or undefined when calling apiV1MemesMemosRetrieve().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("jwtHeaderAuth", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/memes/{meme_pk}/memos/{id}/`
          .replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"])))
          .replace(`{${"meme_pk"}}`, encodeURIComponent(String(requestParameters["memePk"]))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) => MemoFromJSON(jsonValue))
  }

  /**
   */
  async apiV1MemesMemosRetrieve(
    requestParameters: ApiV1MemesMemosRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Memo> {
    const response = await this.apiV1MemesMemosRetrieveRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async apiV1MemesMemosUpdateRaw(
    requestParameters: ApiV1MemesMemosUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Memo>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling apiV1MemesMemosUpdate().'
      )
    }

    if (requestParameters["memePk"] == null) {
      throw new runtime.RequiredError(
        "memePk",
        'Required parameter "memePk" was null or undefined when calling apiV1MemesMemosUpdate().'
      )
    }

    if (requestParameters["id2"] == null) {
      throw new runtime.RequiredError(
        "id2",
        'Required parameter "id2" was null or undefined when calling apiV1MemesMemosUpdate().'
      )
    }

    if (requestParameters["meme"] == null) {
      throw new runtime.RequiredError(
        "meme",
        'Required parameter "meme" was null or undefined when calling apiV1MemesMemosUpdate().'
      )
    }

    if (requestParameters["content"] == null) {
      throw new runtime.RequiredError(
        "content",
        'Required parameter "content" was null or undefined when calling apiV1MemesMemosUpdate().'
      )
    }

    if (requestParameters["createdAt"] == null) {
      throw new runtime.RequiredError(
        "createdAt",
        'Required parameter "createdAt" was null or undefined when calling apiV1MemesMemosUpdate().'
      )
    }

    if (requestParameters["updatedAt"] == null) {
      throw new runtime.RequiredError(
        "updatedAt",
        'Required parameter "updatedAt" was null or undefined when calling apiV1MemesMemosUpdate().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("jwtHeaderAuth", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const consumes: runtime.Consume[] = [
      { contentType: "application/x-www-form-urlencoded" },
      { contentType: "multipart/form-data" },
      { contentType: "application/json" }
    ]
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes)

    let formParams: { append(param: string, value: any): any }
    let useForm = false
    if (useForm) {
      formParams = new FormData()
    } else {
      formParams = new URLSearchParams()
    }

    if (requestParameters["id2"] != null) {
      formParams.append("id", requestParameters["id2"] as any)
    }

    if (requestParameters["meme"] != null) {
      formParams.append("meme", requestParameters["meme"] as any)
    }

    if (requestParameters["content"] != null) {
      formParams.append("content", requestParameters["content"] as any)
    }

    if (requestParameters["createdAt"] != null) {
      formParams.append("created_at", (requestParameters["createdAt"] as any).toISOString())
    }

    if (requestParameters["updatedAt"] != null) {
      formParams.append("updated_at", (requestParameters["updatedAt"] as any).toISOString())
    }

    const response = await this.request(
      {
        path: `/api/v1/memes/{meme_pk}/memos/{id}/`
          .replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"])))
          .replace(`{${"meme_pk"}}`, encodeURIComponent(String(requestParameters["memePk"]))),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: formParams
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) => MemoFromJSON(jsonValue))
  }

  /**
   */
  async apiV1MemesMemosUpdate(
    requestParameters: ApiV1MemesMemosUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Memo> {
    const response = await this.apiV1MemesMemosUpdateRaw(requestParameters, initOverrides)
    return await response.value()
  }
}

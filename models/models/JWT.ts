/* tslint:disable */
/* eslint-disable */
/**
 * Dionysus API
 * Meme Project
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev.shinkeonkim@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime"
import type { UserDetails } from "./UserDetails"
import { UserDetailsFromJSON, UserDetailsFromJSONTyped, UserDetailsToJSON, UserDetailsToJSONTyped } from "./UserDetails"

/**
 * Serializer for JWT authentication.
 * @export
 * @interface JWT
 */
export interface JWT {
  /**
   *
   * @type {string}
   * @memberof JWT
   */
  access: string
  /**
   *
   * @type {string}
   * @memberof JWT
   */
  refresh: string
  /**
   *
   * @type {UserDetails}
   * @memberof JWT
   */
  user: UserDetails
}

/**
 * Check if a given object implements the JWT interface.
 */
export function instanceOfJWT(value: object): value is JWT {
  if (!("access" in value) || value["access"] === undefined) return false
  if (!("refresh" in value) || value["refresh"] === undefined) return false
  if (!("user" in value) || value["user"] === undefined) return false
  return true
}

export function JWTFromJSON(json: any): JWT {
  return JWTFromJSONTyped(json, false)
}

export function JWTFromJSONTyped(json: any, ignoreDiscriminator: boolean): JWT {
  if (json == null) {
    return json
  }
  return {
    access: json["access"],
    refresh: json["refresh"],
    user: UserDetailsFromJSON(json["user"])
  }
}

export function JWTToJSON(json: any): JWT {
  return JWTToJSONTyped(json, false)
}

export function JWTToJSONTyped(value?: JWT | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value
  }

  return {
    access: value["access"],
    refresh: value["refresh"],
    user: UserDetailsToJSON(value["user"])
  }
}
